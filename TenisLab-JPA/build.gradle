plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.7.20'
    id 'org.jetbrains.kotlin.plugin.allopen' version '1.7.20'
    id 'org.jetbrains.kotlin.plugin.noarg' version '1.7.20'

    //kotlin("plugin.serialization") version "1.7.20"
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.7.20'
    id("org.jetbrains.dokka") version "1.7.20"
}

group 'com.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.9.1'
}

sourceCompatibility = "16"
targetCompatibility = "16"

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

[compileKotlin, compileTestKotlin].forEach {
    it.kotlinOptions {
        jvmTarget = '1.8'
    }
}

allOpen {
    annotation('javax.persistence.Entity')
    annotation('javax.persistence.Embeddable')
    annotation('javax.persistence.MappedSuperclass')
}

noArg {
    annotation('javax.persistence.Entity')
    annotation('javax.persistence.Embeddable')
    annotation('javax.persistence.MappedSuperclass')
}

dependencies {
    implementation('org.hibernate:hibernate-core:5.6.1.Final')

    // Exposed
    implementation("org.jetbrains.exposed:exposed-core:0.40.1")
    implementation("org.jetbrains.exposed:exposed-dao:0.40.1")
    implementation("org.jetbrains.exposed:exposed-jdbc:0.40.1")

    // Base de datos
    implementation("com.h2database:h2:2.1.214")

    // Loggers
    implementation("io.github.microutils:kotlin-logging-jvm:3.0.4")
    implementation("ch.qos.logback:logback-classic:1.4.5")

    // Fechas
    implementation("org.jetbrains.exposed:exposed-java-time:0.40.1")

    // Serialization para JSON
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.4.1")

    //Dokka para sustituir a JDOC y KDOC
    implementation("org.jetbrains.dokka:kotlin-as-java-plugin:1.7.20")

    //Codificación contraseñas
    implementation("com.google.guava:guava:31.1-jre")

    // JUnit y Mockito
    testImplementation('io.mockk:mockk:1.13.2')

    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
}

test {
    useJUnitPlatform()
}